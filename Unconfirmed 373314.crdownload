# -*- coding: utf-8 -*-
"""PythonProcedural2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14KXa5m-CODb_I8uNTOvtYrdQj-t4e-1G
"""

from google.colab import files
uploaded = files.upload()

from google.colab import drive
drive.mount('/content/drive')

#https://towardsdatascience.com/3-ways-to-load-csv-files-into-colab-7c14fcbdcb92#:~:text=Click%20on%20%E2%80%9CChoose%20Files%E2%80%9D%20then,name%20of%20the%20uploaded%20file).
import pandas as pd

import io
df = pd.read_csv(io.BytesIO(uploaded['CTASample.csv.csv']))

df

#Max Grade Each Student
df['max_grade'] = (df['Advanced Programming Score']+df['Computer Architecture Score']+df['Databases Score']+df['Ethics in Computer Science Score']
+df['Intro to Programming Score']+df['Puzzles and Problem Solving Score'])/6
df.max(axis=1)

#Min Grade Each Student
df['min_grade'] = (df['Advanced Programming Score']+df['Computer Architecture Score']+df['Databases Score']+df['Ethics in Computer Science Score']
+df['Intro to Programming Score']+df['Puzzles and Problem Solving Score'])/6
df.min(axis=1)

#https://www.educative.io/edpresso/how-to-calculate-the-standard-deviation-using-pandas
#Standard Deviation of each students total scores
df['standard_deviation'] = (df['Advanced Programming Score']+df['Computer Architecture Score']+df['Databases Score']+df['Ethics in Computer Science Score']
+df['Intro to Programming Score']+df['Puzzles and Problem Solving Score'])
df.std(axis=1)

#median value of each student total score
df['median_value'] = (df['Advanced Programming Score']+df['Computer Architecture Score']+df['Databases Score']+df['Ethics in Computer Science Score']
+df['Intro to Programming Score']+df['Puzzles and Problem Solving Score'])
df.median(axis=1)

#mean grade of each student
df['mean_grade'] = (df['Advanced Programming Score']+df['Computer Architecture Score']+df['Databases Score']+df['Ethics in Computer Science Score']
+df['Intro to Programming Score']+df['Puzzles and Problem Solving Score'])/6
df.median(axis=1)

df.describe

def freq(GRADE):
    if GRADE >= 97: return 'A+'
    elif GRADE >=93: return 'A'
    elif GRADE >=90: return 'A-'
    elif GRADE >=87: return 'B+'
    elif GRADE >=83: return 'B'
    elif GRADE >=80: return 'B-'
    elif GRADE >=77: return 'C+'
    elif GRADE >=73: return 'C'
    elif GRADE >=70: return 'C-'
    elif GRADE >=67: return 'D+'
    elif GRADE >=63: return 'D'
    elif GRADE >=60: return 'D-'
    else: return 'F'

df['GRADE'] = df.apply(lambda x: freq(x['mean_grade']),axis=1)

df

def frequer(GRADE):
    if GRADE >= 97: return 'A+'
    elif GRADE >=93: return 'A'
    elif GRADE >=90: return 'A-'
    elif GRADE >=87: return 'B+'
    elif GRADE >=83: return 'B'
    elif GRADE >=80: return 'B-'
    elif GRADE >=77: return 'C+'
    elif GRADE >=73: return 'C'
    elif GRADE >=70: return 'C-'
    elif GRADE >=67: return 'D+'
    elif GRADE >=63: return 'D'
    elif GRADE >=60: return 'D-'
    else: return 'F'

df['Databases Letter Grade'] = df.apply(lambda x: frequer(x['Databases Score']),axis=1)

df

def showGPA(GRADE):
          if GRADE >= 97: return '4.2'
          elif GRADE >=93: return '4.2'
          elif GRADE >=90: return '4.0'
          elif GRADE >=87: return '3.8'
          elif GRADE >=83: return '3.3'
          elif GRADE >=80: return '3.0'
          elif GRADE >=77: return '2.7'
          elif GRADE >=73: return '2.3'
          elif GRADE >=70: return '2'
          elif GRADE >=67: return '1.7'
          elif GRADE >=63: return '1.3'
          elif GRADE >=60: return '1'
          else: return 'F'
        

            
df['Databases GPA'] = df.apply(lambda x: showGPA(x['mean_grade']),axis=1)

df['mean_grade'].astype(int)

df['mean_grade']

#gets the letter grade in databases for all students
df['Databases Letter Grade'] = df.apply(lambda x: frequer(x['Databases Score']),axis=1)

df

#gets the programming letter grade for all students 
def frequer(GRADE):
    if GRADE >= 97: return 'A+'
    elif GRADE >=93: return 'A'
    elif GRADE >=90: return 'A-'
    elif GRADE >=87: return 'B+'
    elif GRADE >=83: return 'B'
    elif GRADE >=80: return 'B-'
    elif GRADE >=77: return 'C+'
    elif GRADE >=73: return 'C'
    elif GRADE >=70: return 'C-'
    elif GRADE >=67: return 'D+'
    elif GRADE >=63: return 'D'
    elif GRADE >=60: return 'D-'
    else: return 'F'

df['Intro To Prog Grade'] = df.apply(lambda x: frequer(x['Intro To Programming Score']),axis=1)

df

#gets the comp arch grade for all students
def frequer(GRADE):
    if GRADE >= 97: return 'A+'
    elif GRADE >=93: return 'A'
    elif GRADE >=90: return 'A-'
    elif GRADE >=87: return 'B+'
    elif GRADE >=83: return 'B'
    elif GRADE >=80: return 'B-'
    elif GRADE >=77: return 'C+'
    elif GRADE >=73: return 'C'
    elif GRADE >=70: return 'C-'
    elif GRADE >=67: return 'D+'
    elif GRADE >=63: return 'D'
    elif GRADE >=60: return 'D-'
    else: return 'F'
df['Comp Arch Grade'] = df.apply(lambda x: frequer(x['Computer Architecture Score']),axis=1)

df

#gets the ethics in comp science grade for all students   
def frequer(GRADE):
    if GRADE >= 97: return 'A+'
    elif GRADE >=93: return 'A'
    elif GRADE >=90: return 'A-'
    elif GRADE >=87: return 'B+'
    elif GRADE >=83: return 'B'
    elif GRADE >=80: return 'B-'
    elif GRADE >=77: return 'C+'
    elif GRADE >=73: return 'C'
    elif GRADE >=70: return 'C-'
    elif GRADE >=67: return 'D+'
    elif GRADE >=63: return 'D'
    elif GRADE >=60: return 'D-'
    else: return 'F'
df['Ethics Comp Science Grade'] = df.apply(lambda x: frequer(x['Ethics in Computer Science Score']),axis=1)

df

#gets the advanced programming grade for all students
def frequer(GRADE):
    if GRADE >= 97: return 'A+'
    elif GRADE >=93: return 'A'
    elif GRADE >=90: return 'A-'
    elif GRADE >=87: return 'B+'
    elif GRADE >=83: return 'B'
    elif GRADE >=80: return 'B-'
    elif GRADE >=77: return 'C+'
    elif GRADE >=73: return 'C'
    elif GRADE >=70: return 'C-'
    elif GRADE >=67: return 'D+'
    elif GRADE >=63: return 'D'
    elif GRADE >=60: return 'D-'
    else: return 'F'
    
df['Adv Prog Grade'] = df.apply(lambda x: frequer(x['Advanced Programming Score']),axis=1)

df

#gets the puzzles and problem solving grade for all students
def frequer(GRADE):
    if GRADE >= 97: return 'A+'
    elif GRADE >=93: return 'A'
    elif GRADE >=90: return 'A-'
    elif GRADE >=87: return 'B+'
    elif GRADE >=83: return 'B'
    elif GRADE >=80: return 'B-'
    elif GRADE >=77: return 'C+'
    elif GRADE >=73: return 'C'
    elif GRADE >=70: return 'C-'
    elif GRADE >=67: return 'D+'
    elif GRADE >=63: return 'D'
    elif GRADE >=60: return 'D-'
    else: return 'F'
df['Puzzles and Problem Grade'] = df.apply(lambda x: frequer(x['Puzzles and Problem Solving Score']),axis=1)

df

df.loc[df['mean_grade'] >= 97, 'Difference'] = 'N/A' 
df.loc[ df['mean_grade'] >= 93 & df['mean_grade'] < 97, 'Difference'] = 'N/A'  
df.loc[ df['mean_grade'] >= 90, 'Difference'] = 93- df['mean_grade'] 
df.loc[ df['mean_grade'] >= 87, 'Difference'] = 90- df['mean_grade']  
df.loc[ df['mean_grade'] >= 83, 'Difference'] = 87- df['mean_grade']  
df.loc[ df['mean_grade'] >= 80, 'Difference'] = 83- df['mean_grade']  
df.loc[ df['mean_grade'] >= 77, 'Difference'] = 80- df['mean_grade']  
df.loc[ df['mean_grade'] >= 73, 'Difference'] = 77- df['mean_grade']  
df.loc[ df['mean_grade'] >= 70, 'Difference'] = 75- df['mean_grade']  
df.loc[ df['mean_grade'] >= 67, 'Difference'] = 70- df['mean_grade']  
df.loc[ df['mean_grade'] >= 63, 'Difference'] = 67- df['mean_grade']  
df.loc[ df['mean_grade'] >= 60, 'Difference'] = 63- df['mean_grade'] 
df.loc[ df['mean_grade'] < 60, 'Difference'] = 60- df['mean_grade']
df