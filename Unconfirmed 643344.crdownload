# -*- coding: utf-8 -*-
"""Cprocedural.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10PXKMn13PqqT1lvuQtcBJchG9JjpvhLV
"""

#https://harshityadav95.medium.com/how-to-run-cuda-c-or-c-on-google-colab-or-azure-notebook-ea75a23a5962
#sets up the collab environment to run code in c language

!apt-get --purge remove cuda nvidia* libnvidia-*
!dpkg -l | grep cuda- | awk '{print $2}' | xargs -n1 dpkg --purge
!apt-get remove cuda-*
!apt autoremove
!apt-get update

!wget https://developer.nvidia.com/compute/cuda/9.2/Prod/local_installers/cuda-repo-ubuntu1604-9-2-local_9.2.88-1_amd64 -O cuda-repo-ubuntu1604-9-2-local_9.2.88-1_amd64.deb
!dpkg -i cuda-repo-ubuntu1604-9-2-local_9.2.88-1_amd64.deb
!apt-key add /var/cuda-repo-9-2-local/7fa2af80.pub
!apt-get update
!apt-get install cuda-9.2

!nvcc --version

!pip i  nstall git+git://github.com/andreinechaev/nvcc4jupyter.git

# Commented out IPython magic to ensure Python compatibility.
# %load_ext nvcc_plugin

#runs the collab drive
from google.colab import drive
drive.mount('/content/drive')

#https://towardsdatascience.com/3-ways-to-load-csv-files-into-colab-7c14fcbdcb92#:~:text=Click%20on%20%E2%80%9CChoose%20Files%E2%80%9D%20then,name%20of%20the%20uploaded%20file).

from google.colab import files
uploaded = files.upload()

#https://stdin.top/posts/csv-in-c/
#opens csv from google sheets

#include<stdio.h>
#include<string.h>
#include<stdbool.h>

#define MAXCHAR 1000

int main(){

    FILE *fp;
    char row[MAXCHAR];

    fp = fopen("https://docs.google.com/spreadsheets/d/1C0E_5KgF3Qq4uHCycAYlIEqiUqJBe8pVgWWPfcpGR3Q/edit#gid=1586021559","r");

    ;

    while (feof(fp) != true)
    {
        fgets(row, MAXCHAR, fp);
        printf("Row: %s", row);
    }
    

    return 0;
}

#gets the letter grade from percentage scores

#include<stdio.h>
int main()
{
   // variables
   int score;
   char grade;

   // take score
   printf("Enter score(0-100): ");
   scanf("%d",&score);

   // check score is valid or not
   // score is valid if it belongs to 0-100
   if(score<0 || score>100) {
     printf("Invalid Score");
     // stop execution
     return 0;
   }

   // find grade for given score
   // for score >= 90
   if(score>=97 && score<=100)
     grade = 'A+';

   // for score>=93 and <97
   else if(score>=93)
     grade = 'A';

   // for score>=90 and <93
   else if(score>=90)
     grade = 'A-';

   // for score>=87 and <90
   else if(score>=87)
     grade = 'B+';

   // for score>=83 and <87
   else if(score>=83)
     grade = 'B';
  
   // for score>=80 and <83
   else if(score>=80)
     grade = 'B-';

   // for score>=77 and <80
   else if(score>=77)
     grade = 'C+';

   // for score>=73 and <77
   else if(score>=73)
     grade = 'C';
 
   // for score>=70 and <73
   else if(score>=70)
     grade = 'C-';
   

   // for score>=67 and <70
   else if(score>=67)
     grade = 'D+';
   

   // for score>=63 and <67
   else if(score>=63)
     grade = 'D';
 
  
   // for score<50
   else
     grade = 'F';

   // display grade
   printf("Grade: %c\n", grade);

   return 0;
}

#https://cboard.cprogramming.com/c-programming/117383-c-program-using-structs-calculate-grades.html
#include <stdio.h>
#include <ctype.h>
#define NAME_LEN 50
#define STUD_LEN 100
#accepts, reads and prints student name and scores in live mode

int read_line(char str[], int n);
int find_students(int students);

struct test_result {
char name[NAME_LEN+1];
int number;
double grade1;
double grade2;
double grade3;
double grade4;
double grade5;
double grade6;
float numeric;
}studen[STUD_LEN];

void insert(void);
void print(void);

int num_students = 0;

int main(void)
{
struct test_result test;
printf("Enter the student's name: ");
read_line(test.name, NAME_LEN);
printf("Enter the student's grade for Intro to Programming: ");
scanf("%lg", &test.grade1);
printf("Enter the student's grade for Databases: ");
scanf("%lg", &test.grade2);  
printf("Enter the student's grade for Computer Architecture: ");
scanf("%lg", &test.grade3);
printf("Enter the student's grade for Ethics in Computer Science: ");
scanf("%lg", &test.grade4); 
printf("Enter the student's grade for Advanced Programming: ");
scanf("%lg", &test.grade5);
printf("Enter the student's grade for Puzzles and Problem Solving: ");
scanf("%lg", &test.grade6); 
test.numeric = (test.grade1 + test.grade2 + test.grade3 + test.grade4 + test.grade5 + test.grade6); 
printf("%s's numeric score for the entire course is %.1f\n", test.name, test.numeric);

char code;
for (;;) {
printf("\n");
printf("Would you like to enter another student result? y(yes) or n(no)?");
scanf(" %c", &code);
while (getchar() != '\n') /* skips to end of line */
;

switch (code) {
case 'y': insert();
break;
case 'n': print();
return 0;
default: printf("Invalid entry. Try again.\n");
return 0;
} 
}
}

int find_students(int students)
{
int i;

for (i = 0; i < num_students; i++)
if (studen[i].number == students)
return i;
return -1;
}


void insert(void)
{ 
int part_number;
if (num_students == STUD_LEN) {
printf("Sorry, cannot enter any more students.\n");
return;
}

studen[num_students].number = part_number;
printf("Enter the student name: ");
read_line(studen[num_students].name, NAME_LEN);
printf("Enter the student's grade for Intro to Programming: ");
scanf("%lg", &studen[num_students].grade1);
printf("Enter the student's grade for Databases: ");
scanf("%lg", &studen[num_students].grade2);
printf("Enter the student's grade for Computer Architecture: ");
scanf("%lg", &studen[num_students].grade3);
printf("Enter the student's grade for Ethics in Computer Programming: ");
scanf("%lg", &studen[num_students].grade4);
printf("Enter the student's grade for Advanced Programming: ");
scanf("%lg", &studen[num_students].grade5);
printf("Enter the student's grade for Puzzles and Problem Solving: ");
scanf("%lg", &studen[num_students].grade6);


studen[num_students].numeric = 
((studen[num_students].grade1 + studen[num_students].grade2 + studen[num_students].grade3 + studen[num_students].grade4 + studen[num_students].grade5 + studen[num_students].grade6));
printf("%s's numeric score for the entire course is %.1f\n", studen[num_students].name, studen[num_students].numeric);
num_students++;
}


void print(void)
{
printf("The average score on Intro to Programming is\n");
printf("The average score on Databases is\n");
printf("The average score on Computer Architecture is\n");
printf("The average score on Ethics in Computer Science is\n"); 
printf("The average score on Advanced Programming is\n");
printf("The average score on Puzzles and Problem Solving is\n"); 
printf("The average score for the entire course is\n");

}


int read_line(char str[], int n)
{
int ch, i = 0;

while(isspace(ch = getchar()))
;
str[i++] = ch;
while ((ch = getchar()) != '\n') {
if (i < n)
str[i++] = ch;
}
str[i] = '\0';
return i;
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

const char* getfield(char* line, int num)
{
    const char* tok;
    for (tok = strtok(line, ";");
            tok && *tok;
            tok = strtok(NULL, ";\n"))
    {
        if (!--num)
            return tok;
    }
    return NULL;
}

int main()
{
    FILE* stream = fopen("https://docs.google.com/spreadsheets/d/1C0E_5KgF3Qq4uHCycAYlIEqiUqJBe8pVgWWPfcpGR3Q/edit#gid=1586021559", "r");

    char line[1024];
    while (fgets(line, 1024, stream))
    {
        char* tmp = strdup(line);
        printf("Field 3 would be %s\n", getfield(tmp, 3));
        // NOTE strtok clobbers tmp
        free(tmp);
    }
}

#https://www.dreamincode.net/forums/topic/81295-how-to-determine-the-highestlowest-score/
#include <stdlib.h>
#include <string.h>
#include<stdio.h>
#accepts student tests scores and calculates the highest grade
int main()

{

float a,b,c,d=0,L,H;

printf("Enter number of students:");

scanf("%f",&b);

for (a=1; a<=b; a++)

{

printf("\nEnter test score for student No.%.f:",a);

scanf("%f",&c);

if(c>=97)

printf("Test score: %.f Grade: A+\n",c);

else if(c>=93)

printf("Test score: %.f Grade: A\n",c);

else if(c>=90)

printf("Test score: %.f Grade: A-\n",c);

else if(c>=87)

printf("Test score: %.f Grade: B+\n",c);

else if(c<=83)

printf("Test score: %.f Grade: B\n",c);
 
else if(c>=80)

printf("Test score: %.f Grade: B-\n",c);

else if(c>=77)

printf("Test score: %.f Grade: C+\n",c);

else if(c<=73)

printf("Test score: %.f Grade: C\n",c);
 
else if(c>=70)

printf("Test score: %.f Grade: C-\n",c);

else if(c>=67)

printf("Test score: %.f Grade: D+\n",c);

else if(c<=65)

printf("Test score: %.f Grade: D\n",c);
 
d=d+c;

}

printf("\nThe Average of the %.f score(s) is: %.2f\n",b,d/b);

if (c>b)

L=c;

else (c<b);

H=c;

printf("The lowest test score is: %.f\n",L);

printf("The highest test score is: %.f\n",H);

return 0;

}